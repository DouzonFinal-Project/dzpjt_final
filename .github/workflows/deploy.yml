name: Frontend CI/CD

on:
  push:
    branches: ["main"]

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    # 1) "기본값"만 둡니다. (파생값 X)
    env:
      AWS_REGION: ap-northeast-2
      ECR_REPO: 373317459179.dkr.ecr.ap-northeast-2.amazonaws.com/web/frontend
      INSTANCE_TAG_ROLE: frontend

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::<ACCOUNT_ID>:role/GHA_OIDC_ECR_SSM_ROLE
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      # 2) 파생 env는 여기서 생성 (중요!! env 블록에서 만들지 말고)
      - name: Set derived envs
        run: |
          echo "FRONT_IMAGE=${ECR_REPO}:latest" >> $GITHUB_ENV
          echo "FRONT_IMAGE_SHA=${ECR_REPO}:${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Build & Push
        working-directory: ./frontend
        run: |
          docker build -t "$FRONT_IMAGE" -t "$FRONT_IMAGE_SHA" .
          docker push "$FRONT_IMAGE"
          docker push "$FRONT_IMAGE_SHA"

      - name: Deploy via SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy frontend" \
            --targets "Key=tag:Role,Values=${INSTANCE_TAG_ROLE}" \
            --parameters commands='[
              "set -eux",
              "aws --region '"${AWS_REGION}"' ecr get-login-password | docker login --username AWS --password-stdin '"${ECR_REPO%/*}"'",
              "cd /opt/frontend",
              "echo FRONT_IMAGE='"${FRONT_IMAGE}"' > .env",
              "docker compose pull",
              "docker compose up -d",
              "docker image prune -f"
            ]' \
            --region "$AWS_REGION"
