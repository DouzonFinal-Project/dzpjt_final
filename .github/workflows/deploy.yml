name: Frontend → ECR → EC2(Nginx copy)

on:
  push:
    branches: [ "main" ]
    paths:
      - "src/**"
      - "public/**"
      - "package.json"
      - "package-lock.json"
      - "Dockerfile"
      - "nginx/**"
      - ".github/workflows/**"
  workflow_dispatch: {}

env:
  AWS_REGION: ap-northeast-2
  AWS_ACCOUNT_ID: 373317459179
  ECR_REPO: web/frontend

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::373317459179:role/github-actions-ecr-pusher
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Setup buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push (latest + SHA)
        run: |
          set -eux
          FRONT_ECR=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}

          docker build \
            --build-arg REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }} \
            -t $FRONT_ECR:latest \
            -t $FRONT_ECR:${GITHUB_SHA} \
            .

          docker push $FRONT_ECR:latest
          docker push $FRONT_ECR:${GITHUB_SHA}

          echo "IMAGE=$FRONT_ECR:${GITHUB_SHA}" >> $GITHUB_ENV

          # 푸시 확인용 다이제스트 출력
          aws ecr describe-images \
            --repository-name ${{ env.ECR_REPO }} \
            --image-ids imageTag=${GITHUB_SHA} \
            --region ${{ env.AWS_REGION }} \
            --query 'imageDetails[0].imageDigest' --output text

      - name: Deploy via SSM (copy static to host Nginx)
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
          ECR_REPO:   ${{ env.ECR_REPO }}
        run: |
          set -euo pipefail

          IMAGE="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:${GITHUB_SHA}"

          CMD_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=tag:Role,Values=frontend" \
            --parameters 'commands=[
              "#!/bin/bash",
              "set -euo pipefail",
              "AWS_REGION='${{ env.AWS_REGION }}'",
              "DST=/var/www/html",
              "IMAGE='${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${{ github.sha }}'",
              "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin '${{ env.AWS_ACCOUNT_ID }}'.dkr.ecr.${AWS_REGION}.amazonaws.com",
              "docker pull ${IMAGE}",
              "CID=$(docker create ${IMAGE})",
              "rm -rf ${DST:?}/*",
              "docker cp ${CID}:/usr/share/nginx/html/. ${DST}/",
              "docker rm ${CID}",
              "echo '${{ github.sha }}' > ${DST}/__version.txt",
              "nginx -t && systemctl reload nginx"
            ]' \
            --region "${AWS_REGION}" \
            --query "Command.CommandId" --output text)

          echo "SSM CommandId: ${CMD_ID}"

          # 결과 폴링(실패 시 CI도 실패)
          TARGETS=$(aws ec2 describe-instances \
            --filters "Name=tag:Role,Values=frontend" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" --output text --region "${AWS_REGION}")

          for IID in ${TARGETS}; do
            for i in $(seq 1 60); do
              STATUS=$(aws ssm get-command-invocation \
                        --command-id "${CMD_ID}" --instance-id "${IID}" \
                        --query "Status" --output text --region "${AWS_REGION}" || echo "Pending")
              if [ "${STATUS}" = "Success" ]; then
                echo "OK: ${IID}"
                break
              elif [[ "${STATUS}" =~ (Failed|Cancelled|TimedOut) ]]; then
                echo "ERROR: ${IID} status=${STATUS}"
                aws ssm get-command-invocation \
                  --command-id "${CMD_ID}" --instance-id "${IID}" \
                  --region "${AWS_REGION}" --output text || true
                exit 1
              fi
              sleep 5
            done
          done
      - name: Create env file
        run: |
          cat > .env.production << 'EOF'
          REACT_APP_API_BASE_URL=/v1
          EOF
